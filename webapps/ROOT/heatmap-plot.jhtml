<%
// the size of the blocks in pixels, roughly
int blockSize = 19;

// SVG download will return after generating chart
boolean downloadSVG = request.getParameter("downloadSVG")!=null;

// plot controls
boolean linear = Util.getBoolean(request, "linear");
if (request.getParameter("toggleLinear")!=null) linear = !linear;
boolean logarithmic = !linear;

boolean relative = Util.getBoolean(request, "relative");
if (request.getParameter("toggleRelative")!=null) relative = !relative;

// initialize for finding min,max
double xMin = 1e10;
double xMax = 0.0;
double yMin = 1e10;
double yMax = 0.0;

// fixed z ranges
double zMin = 0.0;
double zMax = 1.0e5;
if (relative) {
    zMax = 1.0e2;
}
if (logarithmic) {
    zMax = Util.log2(zMax);
    zMin = Util.log2(1/zMax);
}

// override for certain types of data
boolean logData = experiment.expressionlabel.equals("RMA intensity");
if (logData) {
    linear = true;
    zMin = 1e5;
    zMax = 0;
}

// k is our x,y,z value index
int k = 0;

// loop through each gene building (x,y,z) values for each value
double[] xvalues = new double[genes.length*samples.length];
double[] yvalues = new double[genes.length*samples.length];
double[] zvalues = new double[genes.length*samples.length];
for (int i=0; i<genes.length; i++) {
    Expression expr = new Expression(application, experiment, genes[i]);
    double meanControlValue = expr.getMeanControlValue();
    for (int j=0; j<expr.samples.length; j++) {
        xvalues[k] = (double)j - 0.5;
        yvalues[k] = (double)i - 0.5;
        double value = expr.values[j];
        if (relative) {
            if (logData) {
                value = value - meanControlValue;
            } else {
                value = value/meanControlValue;
            }
        }
        if (linear) {
            zvalues[k] = value;
            if (logData) {
                if (value<zMin) zMin = value;
                if (value>zMax) zMax = value;
            }
        } else if (value==0.0) {
            zvalues[k] = zMin;
        } else {
            zvalues[k] = Util.log2(value);
            if (zvalues[k]<zMin) zvalues[k] = zMin;
        }
        if (xvalues[k]<xMin) xMin = xvalues[k];
        if (xvalues[k]>xMax) xMax = xvalues[k];
        if (yvalues[k]<yMin) yMin = yvalues[k];
        if (yvalues[k]>yMax) yMax = yvalues[k];
        k++;
    }
}

// create the dataset for the plot
DefaultXYZDataset exprDataset = new DefaultXYZDataset();
exprDataset.addSeries("TAG HERE?", new double[][]{ xvalues, yvalues, zvalues });

// y axis: genes
String[] yLabels = new String[genes.length];
for (int i=0; i<genes.length; i++) {
    if (genes[i].name!=null && !genes[i].name.equals(genes[i].id)) {
        yLabels[i] = genes[i].name+" "+genes[i].id;
    } else if (genes[i].aliases.length>0) {
        yLabels[i] = genes[i].aliases[0]+" "+genes[i].id;
    } else {
        yLabels[i] = genes[i].id;
    }
}
SymbolAxis yAxis = new SymbolAxis("", yLabels);
yAxis.setRange(-0.5, genes.length-0.5);
yAxis.setMinorTickCount(0);
yAxis.setAutoTickUnitSelection(false);
yAxis.setVerticalTickLabels(true);
yAxis.setTickLabelsVisible(true);
yAxis.setVerticalTickLabels(false);

// x axis: samples
String[] xLabels = new String[samples.length];
for (int i=0; i<samples.length; i++) xLabels[i] = samples[i].label+" ["+samples[i].num+"]";
SymbolAxis xAxis = new SymbolAxis("", xLabels);
xAxis.setRange(-0.5, samples.length-0.5);
xAxis.setMinorTickCount(0);
xAxis.setAutoTickUnitSelection(false);
xAxis.setTickLabelsVisible(true);
xAxis.setVerticalTickLabels(true);


// xaxis - top - show conditions
String[] conditionLabels = new String[samples.length];
String prevCondition = "";
double prevTime = -1.0;
for (int i=0; i<samples.length; i++) {
    if (!samples[i].condition.equals(prevCondition) || samples[i].time!=prevTime) {
        if (experiment.isTimewise) {
            conditionLabels[i] = samples[i].condition+" "+timeFormat.format(samples[i].time)+" \u23a3";
        } else {
            conditionLabels[i] = samples[i].condition+" \u23a3";
        }
        prevCondition = samples[i].condition;
        prevTime = samples[i].time;
    } else {
        conditionLabels[i] = "\u23a2";
    }
}
SymbolAxis x2Axis = new SymbolAxis("", conditionLabels);
x2Axis.setTickMarksVisible(false);
x2Axis.setVerticalTickLabels(true);

// block renderer
XYBlockRenderer renderer = new XYBlockRenderer();
renderer.setBlockWidth(blockSize);
renderer.setBlockHeight(blockSize);
renderer.setBlockAnchor(RectangleAnchor.BOTTOM_LEFT);

// pallete scaling
LookupPaintScale paintScale = new LookupPaintScale(zMin, zMax, Color.black);
String paletteName = Util.getString(request, "paletteName");
String changePalette = Util.getString(request, "changePalette");
if (changePalette.length()>0) paletteName = changePalette;
Color[] palette = new Color[0];
if (paletteName.length()==0 || paletteName.equals("brewerRdYlGn21")) paletteName = "heat palette";
if (paletteName.equals("heat palette")) palette = Palette.heat100();
if (paletteName.equals("rainbow palette")) palette = Palette.rainbow100();
if (paletteName.equals("cyan-magenta palette")) palette = Palette.cm100();
for (int i=0; i<100; i++) {
    double cval = zMin+(zMax-zMin)*i*0.01;
    paintScale.add(cval, palette[i]);
}
paintScale.add(zMax, Color.white);
renderer.setPaintScale(paintScale);

// plot
XYPlot plot = new XYPlot(exprDataset, xAxis, yAxis, renderer);
plot.setBackgroundPaint(Color.black);
plot.setRangeGridlinePaint(Color.white);
plot.setDomainAxis(1, x2Axis);


// annotate the plot with lines and text for the condition
String condition = "";
double time = 99.9;
for (int i=0; i<samples.length; i++) {
    if (time!=samples[i].time) {
        time = samples[i].time;
        plot.addAnnotation(new XYLineAnnotation(samples[i].num-1.5, -0.5, samples[i].num-1.5, genes.length-0.5, new BasicStroke(0.2f), Color.gray));
    }
    if (!condition.equals(samples[i].condition)) {
        condition = samples[i].condition;
        plot.addAnnotation(new XYLineAnnotation(samples[i].num-1.5,- 0.5, samples[i].num-1.5, genes.length-0.5, new BasicStroke(0.2f), Color.black));
    }
}

// add thin line between genes to guide the eye
for (int i=0; i<genes.length; i++) plot.addAnnotation(new XYLineAnnotation(-0.5, i+0.5, samples.length-0.5, i+0.5, new BasicStroke(0.1f), Color.black));

// chart
String chartTitle = plotTitle;
JFreeChart chart = new JFreeChart(chartTitle, plot);
chart.removeLegend();
chart.setBackgroundPaint(Color.white);

ArrayList<TextTitle> subtitles = new ArrayList<TextTitle>();
String subTitle = experiment.expressionlabel;
if (relative) {
    if (logData) {
        subTitle += " - <control>";
    } else {
        subTitle += " / <control>";
    }
}
subtitles.add(new TextTitle(subTitle));
chart.setSubtitles(subtitles);

// ChartUtilities.applyCurrentTheme(chart);

// image size - equal pixels per square roughly - add 100px for labels
int chartWidth = (samples.length)*blockSize + 125; // add room for labels on left
int chartHeight = (genes.length)*blockSize +  195; // labels top and bottom

String pngFile = null;
if (downloadSVG) {
    // output to SVG file and bail
    SVG.downloadSVG(chart, chartWidth, chartHeight, response);
    return;
} else {
    // output to PNG file in temp dir
    pngFile = ServletUtilities.saveChartAsPNG(chart, chartWidth, chartHeight, session);
}
%>
    <div class="heatmap">
        <img class="heatmapPlot" src="/temp/<%=pngFile%>" alt="<%=chartTitle%>" border="0" width="<%=chartWidth%>" height="<%=chartHeight%>"/>
        <form action="<%=request.getRequestURI()%>" method="post">
            <input type="hidden" name="viewHeatmap" value="true"/>
            <input type="hidden" name="plotTitle" value="<%=plotTitle%>"/>
            <input type="hidden" name="linear" value="<%=linear%>"/>
            <input type="hidden" name="relative" value="<%=relative%>"/>
            <input type="hidden" name="paletteName" value="<%=paletteName%>"/>
            <% for (int i=0; i<genes.length; i++) { %>
                <input type="hidden" name="id" value="<%=genes[i].id%>"/>
                <% } %>
                <% if (linear && !logData) { %>
                <input type="submit" name="toggleLinear" class="viewButton" value="use log scale"/><br/>
                <% } else if (!logData) { %>
                <input type="submit" name="toggleLinear" class="viewButton" value="use linear scale"/><br/>
                <% } %>
                <% if (Sample.hasControls(samples)) {
                if (relative) { %>
                <input type="submit" name="toggleRelative" class="viewButton" value="show <%=experiment.expressionlabel%>"/><br/>
                <% } else if (logData) { %>
                <input type="submit" name="toggleRelative" class="viewButton" value="show <%=experiment.expressionlabel%> &minus; &lang;control&rang;"/><br/>
                <% } else { %>
                <input type="submit" name="toggleRelative" class="viewButton" value="divide by &lang;control&rang;"/><br/>
                <% } } %>
                <select name="changePalette" onChange="submit()">
                    <option <% if (paletteName.equals("heat palette")) out.print("selected"); %> value="heat palette">heat palette</option>
                    <option <% if (paletteName.equals("rainbow palette")) out.print("selected"); %> value="rainbow palette">rainbow palette</option>
                    <option <% if (paletteName.equals("cyan-magenta palette")) out.print("selected"); %> value="cyan-magenta palette">cyan-magenta palette</option>
                </select>
                <br/>
                <input type="submit" name="downloadSVG" class="download" value="download SVG file"/>
        </form>
    </div>

